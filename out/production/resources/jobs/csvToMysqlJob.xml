<beans xmlns = "http://www.springframework.org/schema/beans"
       xmlns:batch = "http://www.springframework.org/schema/batch"
       xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util = "http://www.springframework.org/schema/util"
       xsi:schemaLocation = "http://www.springframework.org/schema/batch

      http://www.springframework.org/schema/batch/spring-batch-2.2.xsd
      http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
      http://www.springframework.org/schema/util
      http://www.springframework.org/schema/util/spring-util-3.0.xsd ">

    <import resource = "context-base.xml" />

    <batch:job id = "csvToMysqlJob">
        <batch:step id = "step1" next="step2">
            <batch:tasklet>
                <batch:chunk reader = "csvFileItemReader" writer = "mysqlItemWriter"
                             processor = "itemProcessor" commit-interval = "10">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
        <batch:step id = "step2">
            <batch:tasklet task-executor="simpleTaskExecutor" throttle-limit="20"  allow-start-if-complete="true">
                <batch:chunk reader = "mysqlItemReader" writer = "mysqlItemWriterStep2"
                             processor = "step2Processor" commit-interval = "3" retry-limit="3">
                    <batch:retryable-exception-classes>
                        <batch:include class="java.lang.Exception"></batch:include>
                    </batch:retryable-exception-classes>
                    <batch:listeners>
                        <batch:listener ref="step2listner"/>
                    </batch:listeners>
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
    </batch:job>

    <bean id = "step2listner" class="csvToMysql.listener.SkippedItemStepExecutionListener"></bean>
    <bean id = "csvFileItemReader"
          class = "org.springframework.batch.item.file.FlatFileItemReader">
        <property name = "resource" value = "classpath:data/sample-data.csv" />
        <property name="lineMapper">
            <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                <property name="lineTokenizer">
                    <bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
                        <property name="names" value="rowNumber, firstName, lastName" />
                    </bean>
                </property>
                <property name="fieldSetMapper">
                    <bean class="csvToMysql.domain.PersonFieldSetMapper" />
                </property>
            </bean>
        </property>
    </bean>

    <bean id = "itemProcessor" class = "csvToMysql.itemProcessor.CustomItemProcessor" />
    <bean id = "step2Processor" class = "csvToMysql.itemProcessor.CustomItemProcessorStep2" />

    <bean id = "mysqlItemWriter" class = "org.springframework.batch.item.database.JdbcBatchItemWriter">
        <property name = "dataSource" ref = "dataSource" />
        <property name = "sql">
            <value>
                <![CDATA[insert into batch_demo.person(person_id, first_name, last_name)
               values (:rowNumber, :firstName, :lastName)]]>
            </value>
        </property>

        <property name = "itemSqlParameterSourceProvider">
            <bean class = "org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
        </property>
    </bean>


    <bean id = "mysqlItemWriterStep2" class = "org.springframework.batch.item.database.JdbcBatchItemWriter">
        <property name = "dataSource" ref = "dataSource" />
        <property name = "sql">
            <value>
                <![CDATA[update batch_demo.person set  status = :status where person_id= :rowNumber;]]>
            </value>
        </property>

        <property name = "itemSqlParameterSourceProvider">
            <bean class = "org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
        </property>
    </bean>

    <bean id="simpleTaskExecutor"
          class="org.springframework.core.task.SimpleAsyncTaskExecutor">
        <property name="concurrencyLimit" value="10"/>
    </bean>

    <bean id="mysqlItemReader" class="org.springframework.batch.item.database.JdbcPagingItemReader">
        <property name="dataSource" ref="dataSource" />
        <!--<property name="sql" value="select * from person where status='UNPROCESSED';" />-->
        <property name="queryProvider">
            <bean class="org.springframework.batch.item.database.support.SqlPagingQueryProviderFactoryBean">
                <property name="dataSource" ref="dataSource" />
                <property name="databaseType" value="mysql" />
                <property name="selectClause" value="select *" />
                <property name="fromClause" value="from person" />
                <property name="whereClause">
                    <!-- Why CDATA?

                         because < etc. is not allowed for xml values
                         when you use &lt; xml parser will work, but
                         now the sql won't because of the & spring assumes
                         a placeholder, see
                          - AbstractSqlPagingQueryProvider.init(...)
                          - JdbcParameterUtils.countParameterPlaceholders(...)

                         -->
                    <value>
                        <![CDATA[
                            where status <> 'PROCESSED'
                        ]]>
                    </value>
                </property>
                <property name="sortKey" value="person_id" />
            </bean>
        </property>
        <property name="pageSize" value="3" />
        <property name="saveState" value="false"/>
        <property name="rowMapper">
            <bean class="csvToMysql.domain.PersonDbRowMapper" />
        </property>
    </bean>

</beans>